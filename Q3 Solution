class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        if(len(nums1) > len(nums2)):
            return self.findMedianSortedArrays(nums2, nums1)
        array_1 = nums1
        array_2 = nums2
        start = 0
        end = len(array_1)
        X = len(array_1)
        Y = len(array_2)
        while(start <= end):
            
            partitionX = int((start + end )/2)
            partitionY = int((X + Y + 1 )/2 - partitionX)
            
#Edge case when there is nothing on the left side, then we assign x1 to infinity
            if(partitionX == 0):
                X1 = float('-inf')
            else:
                X1 = array_1[partitionX - 1]
                
            if(partitionX == len(array_1) ):
                X2 = float('inf')
            else:
                X2 = array_1[partitionX]
                
            if(partitionY == 0):
                Y1 = float('-inf')
            else:
                Y1 = array_2[partitionY - 1]
                
            if(partitionY == len(array_2) ):
                Y2 = float('inf')
            else:
                Y2 = array_2[partitionY]
            if((X1 <= Y2) and (Y1 <= X2)):
                
                # We have found correct partitions
                
                #Check if the sum of length of both is odd or even
                
                if( (X+Y) % 2 == 0):
                    
                    median = ((max(X1,Y1) + min(X2, Y2))/2)
                    return median
                else:
                    
                    median = max(X1,Y1)
                    return median
                
            elif(Y1 > X2):
                start = partitionX + 1
            else:
                end = partitionX - 1
                
 # Overall run Time Complexity = O(log(m+n))
